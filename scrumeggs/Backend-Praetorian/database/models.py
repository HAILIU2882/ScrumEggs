from flask_login import UserMixin
from __init__ import db
from datetime import datetime

                    ########################################
                    #  Database definitions below
                    ########################################
#our platform datetime format definition
class MyDateTime(db.TypeDecorator):
    impl = db.DateTime
    
    def process_bind_param(self, value, dialect):
        if type(value) is str:
            return datetime.datetime.strptime(value, '%Y-%m-%dT%H:%M:%S')
        return value

#user profile info
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True) # primary keys are required by SQLAlchemy
    email = db.Column(db.String(100), unique=True, nullable = False)
    phone = db.Column(db.String(100))#, nullable = False)
    password = db.Column(db.String(100), nullable = False)
    firstName = db.Column(db.String(1000))#, nullable = False) 
    lastName = db.Column(db.String(1000))#, nullable = False)
    skills = db.Column(db.String(1000))#, nullable = False)
    business = db.Column(db.Float, default = 0)  # default business score to 0 at the inception of a user
    rolenames = [] # must have for user_class in praetorian
    date_created = db.Column(db.DateTime, default = datetime.now)

    @classmethod
    def lookup(cls, email):
        return cls.query.filter_by(email=email).one_or_none()

    @classmethod
    def identify(cls, id):
        return cls.query.get(id)

    @property
    def identity(self):
        return self.id

    def __repr__(self):
        return f"User('{self.email}','{self.firstName}','{self.lastName}','{self.skills}','{self.rolenames}')"

#user tasks data
class Task(UserMixin, db.Model):
    taskid = db.Column(db.Integer, primary_key=True)  #id will be assigned automatically
    title = db.Column(db.Text(), nullable = False) 
    assignee = db.Column(db.String(150), nullable = True)  # this is the user email, an assignee can be blank?
    priority = db.Column(db.String(150), nullable = False) # HL: expected input high low medium?
    deadline = db.Column(db.DateTime, nullable = True) # HL : nullable for this column is true meaning there can be one task without deadline
    popularity = db.Column(db.String(150), nullable = True) # HL: high low medium settings
    status = db.Column(db.Text(150), nullable = False) # HL: "Not Started", "In Progress", "Blocked", Completed"
    description = db.Column(db.Text(1000), nullable = True)
    comments = db.Column(db.String(1000), nullable = True)
    # linkedfile = db.Column(db.BLOB, nullable = True) # HL :list of blob files
    linkedfile = db.Column(db.String(1000), nullable = True) # HL :list of blob files
    tags = db.Column(db.String(1000), nullable = True)
    archived = db.Column(db.Integer, nullable = False, default = 0) # HL boolean value 1 for deleted, 0 for not deleted
    viewcount = db.Column(db.Integer, nullable = False, default = 0) # HL counts number of view from OTHER Connected Users 
    lastmodifiedbyemail = db.Column(db.String(150), nullable = True) # this column records who last updated this task with the person's email. updates everytime the task is updated
    lastmodifieddate = db.Column(db.DateTime, default = datetime.now) # registers when was the task last modified, will be updated everytime a task is updated
    date_created = db.Column(db.DateTime, default = datetime.now)  # autogenerated timestamp
    creator_email = db.Column(db.String(150), nullable = True) #creator's email, cannot be changed
    creator_id = db.Column(db.String(150), nullable = True) #creator's id, cannot be changed# HL: I need to define the relationships properly
   
   
    assigneeid = db.Column(db.Integer, db.ForeignKey('user.id')) # HL: this should be the foreign key to user table
    # HL do we need this search string thingie?
    # searchstring = db.column(db.String(1000), default = taskname+assignee+description+comments+tags)


#user connection data, where mainuserid is the current logged in user
class Connections(db.Model):
    connectionid = db.Column(db.Integer, primary_key=True) # this is the connection session id hidden in DB
    mainuserid = db.Column(db.Integer, db.ForeignKey('user.id'))
    connecteduserid = db.Column(db.Integer, db.ForeignKey('user.id'))
    connectionstatus = db.Column(db.Integer, nullable = False, default = 0)  #HL this is a boolean value with 0 being Not accepted 1 being accepted?
    date_created = db.Column(db.DateTime, default = datetime.now)  # autogenerated timestamp
 